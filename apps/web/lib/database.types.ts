// This file contains TypeScript types that match our Supabase database schema
// These types are automatically generated by the Supabase CLI and can be used for type safety

type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string
          username: string | null
          full_name: string | null
          avatar_url: string | null
          bio: string | null
          website: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id: string
          username?: string | null
          full_name?: string | null
          avatar_url?: string | null
          bio?: string | null
          website?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          username?: string | null
          full_name?: string | null
          avatar_url?: string | null
          bio?: string | null
          website?: string | null
          created_at?: string
          updated_at?: string
        }
      }
      categories: {
        Row: {
          id: string
          name: string
          slug: string
          description: string | null
          icon: string | null
          is_active: boolean
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          name: string
          slug: string
          description?: string | null
          icon?: string | null
          is_active?: boolean
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          name?: string
          slug?: string
          description?: string | null
          icon?: string | null
          is_active?: boolean
          created_at?: string
          updated_at?: string
        }
      }
      artworks: {
        Row: {
          id: string
          user_id: string
          title: string
          description: string | null
          image_url: string
          thumbnail_url: string
          width: number | null
          height: number | null
          is_public: boolean
          is_featured: boolean
          like_count: number
          view_count: number
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          user_id: string
          title: string
          description?: string | null
          image_url: string
          thumbnail_url: string
          width?: number | null
          height?: number | null
          is_public?: boolean
          is_featured?: boolean
          like_count?: number
          view_count?: number
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          title?: string
          description?: string | null
          image_url?: string
          thumbnail_url?: string
          width?: number | null
          height?: number | null
          is_public?: boolean
          is_featured?: boolean
          like_count?: number
          view_count?: number
          created_at?: string
          updated_at?: string
        }
      }
      artwork_categories: {
        Row: {
          id: string
          artwork_id: string
          category_id: string
          created_at: string
        }
        Insert: {
          id?: string
          artwork_id: string
          category_id: string
          created_at?: string
        }
        Update: {
          id?: string
          artwork_id?: string
          category_id?: string
          created_at?: string
        }
      }
      likes: {
        Row: {
          id: string
          user_id: string
          artwork_id: string
          created_at: string
        }
        Insert: {
          id?: string
          user_id: string
          artwork_id: string
          created_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          artwork_id?: string
          created_at?: string
        }
      }
      favorites: {
        Row: {
          id: string
          user_id: string
          artwork_id: string
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          user_id: string
          artwork_id: string
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          artwork_id?: string
          created_at?: string
          updated_at?: string
        }
      }
      user_activities: {
        Row: {
          id: string
          user_id: string
          artwork_id: string
          activity_type: string
          created_at: string
        }
        Insert: {
          id?: string
          user_id: string
          artwork_id: string
          activity_type: string
          created_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          artwork_id?: string
          activity_type?: string
          created_at?: string
        }
      }
    }
    Views: {
      trending_artworks: {
        Row: {
          id: string | null
          user_id: string | null
          title: string | null
          description: string | null
          image_url: string | null
          thumbnail_url: string | null
          width: number | null
          height: number | null
          is_public: boolean | null
          is_featured: boolean | null
          like_count: number | null
          view_count: number | null
          created_at: string | null
          updated_at: string | null
          username: string | null
          user_avatar_url: string | null
          like_count_7d: number | null
          view_count_7d: number | null
          trending_score: number | null
        }
      }
      user_recent_artworks: {
        Row: {
          user_id: string | null
          id: string | null
          title: string | null
          description: string | null
          image_url: string | null
          thumbnail_url: string | null
          width: number | null
          height: number | null
          is_public: boolean | null
          is_featured: boolean | null
          like_count: number | null
          view_count: number | null
          created_at: string | null
          updated_at: string | null
          username: string | null
          user_avatar_url: string | null
          last_visited_at: string | null
          visit_count: number | null
        }
      }
    }
    Functions: {
      update_updated_at_column: {
        Args: Record<PropertyKey, never>
        Returns: undefined
      }
      update_like_count: {
        Args: Record<PropertyKey, never>
        Returns: undefined
      }
      track_user_activity: {
        Args: Record<PropertyKey, never>
        Returns: undefined
      }
    }
    Enums: {
      [_ in never]: never
    }
  }
}

// Helper types for our application
export type Profile = Database['public']['Tables']['profiles']['Row']
export type Artwork = Database['public']['Tables']['artworks']['Row'] & {
  creator: Pick<Profile, 'username' | 'avatar_url'>
  categories: Array<{
    id: string
    name: string
    slug: string
  }>
  is_liked?: boolean
  is_favorite?: boolean
  last_visited?: string
  visit_count?: number
}

export type Category = Database['public']['Tables']['categories']['Row']
export type ArtworkWithDetails = Artwork & {
  creator: Pick<Profile, 'username' | 'avatar_url'>
  categories: Array<{
    id: string
    name: string
    slug: string
  }>
  is_liked: boolean
  is_favorite: boolean
  like_count: number
  view_count: number
}

export type ArtworkListParams = {
  category?: string
  search?: string
  sort?: 'newest' | 'popular' | 'trending'
  limit?: number
  offset?: number
  userId?: string
}

export type ActivityType = 'view' | 'like' | 'favorite' | 'color' | 'study'

export type UserActivity = Database['public']['Tables']['user_activities']['Row'] & {
  artwork: Artwork
  type: ActivityType
}

// Types for API responses
export type ApiResponse<T> = {
  data: T | null
  error: string | null
  count?: number
  hasMore?: boolean
}

// Types for form data
export type ArtworkFormData = {
  title: string
  description: string
  image: File | null
  categories: string[]
  isPublic: boolean
}

// Types for the frontend state
export type AppState = {
  user: {
    id: string
    username: string
    avatar_url: string | null
  } | null
  favorites: Set<string>
  recentSearches: string[]
  preferences: {
    theme: 'light' | 'dark' | 'system'
    notifications: {
      likes: boolean
      comments: boolean
      newContent: boolean
    }
  }
}

// Types for the API client
export type ApiClient = {
  getArtworks: (params: ArtworkListParams) => Promise<ApiResponse<Artwork[]>>
  getArtwork: (id: string) => Promise<ApiResponse<ArtworkWithDetails>>
  createArtwork: (data: ArtworkFormData) => Promise<ApiResponse<Artwork>>
  updateArtwork: (id: string, data: Partial<ArtworkFormData>) => Promise<ApiResponse<Artwork>>
  deleteArtwork: (id: string) => Promise<ApiResponse<null>>
  
  getCategories: () => Promise<ApiResponse<Category[]>>
  
  likeArtwork: (artworkId: string) => Promise<ApiResponse<null>>
  unlikeArtwork: (artworkId: string) => Promise<ApiResponse<null>>
  favoriteArtwork: (artworkId: string) => Promise<ApiResponse<null>>
  unfavoriteArtwork: (artworkId: string) => Promise<ApiResponse<null>>
  
  trackActivity: (artworkId: string, type: ActivityType) => Promise<ApiResponse<null>>
  
  getProfile: (username: string) => Promise<ApiResponse<Profile>>
  updateProfile: (data: Partial<Profile>) => Promise<ApiResponse<Profile>>
  
  getFavorites: (userId: string) => Promise<ApiResponse<Artwork[]>>
  getRecentActivities: (userId: string) => Promise<ApiResponse<UserActivity[]>>
}

// Types for the authentication service
export type AuthUser = {
  id: string
  email: string
  user_metadata: {
    name?: string
    avatar_url?: string
  }
}

export type AuthResponse = {
  user: AuthUser | null
  session: any | null
  error: Error | null
}
